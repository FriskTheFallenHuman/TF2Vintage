name: CI

on: [ push, pull_request ]

jobs:
  build:
    strategy:
      matrix:
        platform: [ ubuntu-latest, windows-latest ]
    
    runs-on:
      ${{matrix.platform}}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - id: get-date
        run: |
          echo "::set-output name=date::$(/bin/date -u "+%Y%m%d")"
        shell: bash
      
      - if: runner.os == 'Linux'
        uses: actions/cache@v2
        with:
          path: |
            game/bin
            game/tf2vintage/bin
            src/game/client/obj_client_tf_linux32/release
            src/game/client/client_linux32_tf2vintage.mak
            src/game/client/client_linux32_tf2vintage.mak.vpc_crc
            src/game/server/obj_server_tf_linux32/release
            src/game/server/server_linux32_tf2vintage.mak
            src/game/server/server_linux32_tf2vintage.mak.vpc_crc
            src/mathlib/obj_mathlib_linux32/release
            src/mathlib/mathlib_linux32.mak
            src/mathlib/mathlib_linux32.mak.vpc_crc
            src/raytrace/obj_raytrace_linux32/release
            src/raytrace/raytrace_linux32.mak
            src/raytrace/raytrace_linux32.mak.vpc_crc
            src/tier1/obj_tier1_linux32/release
            src/tier1/tier1_linux32.mak
            src/tier1/tier1_linux32.mak.vpc_crc
            src/vgui2/vgui_controls/obj_vgui_controls_linux32/release
            src/vgui2/vgui_controls/vgui_controls_linux32.mak
            src/vgui2/vgui_controls/vgui_controls_linux32.mak.vpc_crc
          key: ${{ runner.os }}-${{ steps.get-date.outputs.date }}
          restore-keys: ${{ runner.os }}-
      - if: runner.os == 'Windows'
        uses: actions/cache@v2
        with:
          path: |
            game/bin
            game/tf2vintage/bin
            src/game/client/Release_tf2vintage
            src/game/client/client_tf2vintage.vcxproj
            src/game/client/client_tf2vintage.vcxproj.vpc_crc
            src/game/server/Release_tf2vintage
            src/game/server/server_tf2vintage.vcxproj
            src/game/server/server_tf2vintage.vcxproj.vpc_crc
            src/mathlib/Release
            src/mathlib/mathlib.vcxproj
            src/mathlib/mathlib.vcxproj.vpc_crc
            src/raytrace/Release
            src/raytrace/raytrace.vcxproj
            src/raytrace/raytrace.vcxproj.vpc_crc
            src/tier1/Release
            src/tier1/tier1.vcxproj
            src/tier1/tier1.vcxproj.vpc_crc
            src/vgui2/vgui_controls/Release
            src/vgui2/vgui_controls/vgui_controls.vcxproj
            src/vgui2/vgui_controls/vgui_controls.vcxproj.vpc_crc
            src/vscript/Release
            src/vscript/vscript.vcxproj
            src/vscript/vscript.vcxproj.vpc_crc
          key: ${{ runner.os }}-${{ steps.get-date.outputs.date }}
          restore-keys: ${{ runner.os }}-
      
      - name: Configure Linux dependencies
        if: runner.os == 'Linux'
        run: sudo apt update && sudo apt install -y build-essential gcc-multilib g++-multilib
      - name: Configure Windows dependencies
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Configure registry
        shell: powershell
        if: runner.os == 'Windows'
        run: |
          REG ADD "HKLM\Software\Microsoft\VisualStudio\12.0\Projects\{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}" /v "DefaultProjectExtension" /t REG_SZ  /d "vcxproj" /f /reg:32
          REG ADD "HKLM\Software\Microsoft\VisualStudio\12.0\Projects\{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}" /v "PossibleProjectExtensions" /t REG_SZ /d "vcxproj;vcxitems;vcproj;mak" /f /reg:32

      - name: Create Linux project
        if: runner.os == 'Linux'
        run: cd src && sudo devtools/bin/vpc /tf2vintage +game /mksln TF2vintage
      - name: Create Windows project
        if: runner.os == 'Windows'
        run: cd src;devtools/bin/vpc.exe /tf2vintage /2015 +game /mksln TF2vintage.sln
      
      - if: runner.os == 'Linux'
        run: ls -R
      
      - name: Download Steam runtime
        if: runner.os == 'Linux'
        run: |
          cd /
          sudo mkdir valve
          cd valve
          sudo wget http://media.steampowered.com/client/runtime/steam-runtime-sdk_latest.tar.xz
          sudo tar xvf steam-runtime-sdk_latest.tar.xz
          sudo mv steam-runtime-sdk_2013-09-05 steam-runtime

      - name: Build Linux project
        if: runner.os == 'Linux'
        run: |
          sudo bash $STEAM_RUNTIME_PATH/setup.sh --debug --target="i386 amd64" --auto-upgrade
          sudo bash $STEAM_RUNTIME_PATH/setup.sh --release --target="i386 amd64" --auto-upgrade
          cd src && sudo make -f TF2vintage.mak 
        env:
          STEAM_RUNTIME_PATH: /valve/steam-runtime
      - name: Build Windows project
        if: runner.os == 'Windows'
        run: cd src;devenv TF2vintage.sln /Build Release

      - name: Upload product
        uses: actions/upload-artifact@v2
        with:
          name: TF2Vintage
          path: game/tf2vintage/bin
  
  release:
    if: startsWith( github.ref, 'refs/tags' )
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: TF2Vintage
        
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag_name: ${{github.ref}}
          release_name: ${{github.ref}}
          draft: false
          prerelease: false
